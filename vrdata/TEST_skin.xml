<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

    
  <!-- Spot Style - 前進動態箭頭 -->


  <style name="Icon前進動態箭頭"
         url="%FIRSTXML%/spots/hotspot_video_sequence_user_defaultpoint9111.png"
         visible="false"
         frame="0"
         lastframe="12"
         framewidth="85"
         frameheight="85"
         stopspotsequence="false"
         crop="0|0|85|85"
         edge="center"
         onloaded="startspotanimation(0.1);showPermanentTooltip(all);"
         onover="onoverIcon前進動態箭頭"
         onout="onoutIcon前進動態箭頭"

         height="40"
         width="60"
         />
  <action name="onoverIcon前進動態箭頭">


pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIcon前進動態箭頭">


resumeautorotation(forcehotspot);

  </action>



    
  <!-- Spot Style - youtube VIDEO -->


  <style name="IconyoutubeVIDEO"
         url="%FIRSTXML%/spots/hotspot_video_frame_sequence_user_defaultpoint10.png"
         visible="false"
         frame="0"
         lastframe="22"
         framewidth="85"
         frameheight="85"
         stopspotsequence="false"
         crop="0|0|85|85"
         edge="center"
         onloaded="startspotanimation(0.1);showPermanentTooltip(all);"
         onover="onoverIconyoutubeVIDEO"
         onout="onoutIconyoutubeVIDEO"

         height="30"
         width="30"
         />
  <action name="onoverIconyoutubeVIDEO">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconyoutubeVIDEO">
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



          
          


<!-- ********** -->
<!-- Thumbnails Stack -->
<!-- id : stackthumbs -->
<!-- ********** -->

  <krpano stackthumbsIsOpen="false" stackthumbsFirstLoad="true" />

  <events name="stackthumbsEvents"
          onnewpano="stackthumbsClose(0);"
          onTourStart="stackthumbsBuild();"
          hidetourcontrols="stackthumbsHide();"
          showtourcontrols="stackthumbsShow();"
          hidetourthumbnails="stackthumbsHide();"
          showtourthumbnails="stackthumbsShow();"
          keep="true"/>

  <layer name="stackthumbsMainLayer" type="container" zorder="1" width="1" height="1" alpha="1" keep="true" x="0" y="0" visible="true" align="bottomright" />

  <action name="stackthumbsHide">
    for (set(hstcstackthumbsi, 0), hstcstackthumbsi LT scene.count, inc(hstcstackthumbsi),
      txtadd(thumbname,'stackthumbs_', get(hstcstackthumbsi));
      txtadd(thumbnameimg, get(thumbname), '_img');
      set(layer[get(thumbname)].visible, false);
      set(layer[get(thumbnameimg)].visible, false);
    );
  </action>
  <action name="stackthumbsShow">
  if (tour_displaythumbnails, 
    for (set(sstcstackthumbsi, 0), sstcstackthumbsi LT scene.count, inc(sstcstackthumbsi),
      txtadd(thumbname,'stackthumbs_', get(sstcstackthumbsi));
      txtadd(thumbnameimg, get(thumbname), '_img');
      set(layer[get(thumbname)].visible, true);
      set(layer[get(thumbnameimg)].visible, true);
    );
  );
  </action>

  <action name="stackthumbsMagnify">
    tween(layer[%1].alpha,  1.0, 0.3, easeInQuad);
    tween(layer[%1].scale, 1.05, 0.3, easeInQuad);
    tween(layer[get(layer[%1].thumbborder)].alpha,  1.0, 0.3, easeInQuad);
    tween(layer[get(layer[%1].thumbborder)].scale, 1.05, 0.3, easeInQuad);
    set(layer[get(layer[%1].thumbborder)].bgborder, '2 0xffffff 1');
    set(layer[get(layer[%1].thumbborder)].mergedalpha, false);
  </action>

  <action name="stackthumbsLies">
    tween(layer[%1].alpha, 0.8, 0.3, easeInQuad);
    tween(layer[%1].scale, 1.0, 0.3, easeInQuad);
    tween(layer[get(layer[%1].thumbborder)].alpha, 0.8, 0.3, easeInQuad);
    tween(layer[get(layer[%1].thumbborder)].scale, 1.0, 0.3, easeInQuad);
    set(layer[get(layer[%1].thumbborder)].bgborder, '2 0xffffff 0.20000000000000001');
    set(layer[get(layer[%1].thumbborder)].mergedalpha, false);
  </action>


<krpano stackthumbsBuilt="false"/>

  <action name="stackthumbsBuild">
    ifnot (stackthumbsBuilt,
    for (set(bststackthumbsi, 0), bststackthumbsi LT scene.count, inc(bststackthumbsi),

        copy(thumburl, scene[get(bststackthumbsi)].thumburl);
        txtadd(thumbname,'stackthumbs_', get(bststackthumbsi));
        txtadd(thumbnameimg, get(thumbname), '_img');

        addplugin(get(thumbname));
        addplugin(get(thumbnameimg));
        set(layer[get(thumbnameimg)].parent, "stackthumbsMainLayer");
        set(layer[get(thumbname)].parent, get(thumbnameimg));
        set(layer[get(thumbnameimg)].url   , get(thumburl));
        set(layer[get(thumbname)].type, 'container');
        set(layer[get(thumbnameimg)].keep  , true);
        set(layer[get(thumbname)].keep  , true);
        set(layer[get(thumbnameimg)].align , bottomright);
        set(layer[get(thumbname)].align , topleft);
        set(layer[get(thumbnameimg)].edge  , center);

        set(layer[get(thumbnameimg)].width , 50);
        set(layer[get(thumbnameimg)].height, 25);
        set(layer[get(thumbname)].width , 50);
        set(layer[get(thumbname)].height, 25);

        set(layer[get(thumbnameimg)].alpha , 0.8);
        set(layer[get(thumbnameimg)].visible , false);
        set(layer[get(thumbname)].alpha , 0.8);
        set(layer[get(thumbname)].visible , false);

        if (bststackthumbsi GE 4, set(reali, 4), set(reali, get(bststackthumbsi)));

        mul(layer[get(thumbnameimg)].x, get(reali),3);
        mul(layer[get(thumbnameimg)].y, get(reali),3);

        add(closedthumboffsetx, 10, 25);
        add(layer[get(thumbnameimg)].x, get(closedthumboffsetx));

        add(closedthumboffsety, 10, 12);
        add(layer[get(thumbnameimg)].y, get(closedthumboffsety));

        copy(layer[get(thumbnameimg)].xsmall, layer[get(thumbnameimg)].x);
        copy(layer[get(thumbnameimg)].ysmall, layer[get(thumbnameimg)].y);

        add(layer[get(thumbnameimg)].zorder, 0, bststackthumbsi);
        add(layer[get(thumbname)].zorder, 0, bststackthumbsi);
        set(layer[get(thumbname)].bgborder, '2 0xffffff 0.20000000000000001');
        set(layer[get(thumbname)].mergedalpha, false);

          set(layer[get(thumbnameimg)].tooltip,get(scene[get(bststackthumbsi)].titleid));
        set(layer[get(thumbnameimg)].thumbborder, get(thumbname));
        set(layer[get(thumbnameimg)].thumbpos, get(bststackthumbsi));
        set(layer[get(thumbnameimg)].linkedpano, get(scene[get(bststackthumbsi)].name) );
        set(layer[get(thumbnameimg)].onclick, stackthumbsOpen() );
      );

      set(stackthumbsBuilt, true);

      stackthumbsShow();


    );
  </action>

  <action name="stackthumbsOpenThumb">
    if(%3 != NEXT,
      set(pos,0);
      copy(curpos, layer[%1].thumbpos);
      set(xdst, 0);
      set(ydst, 0);
    );
    if (pos LT curpos,
      inc(pos);

        inc(ydst, 60);
        if (ishtml5,
          sub(ymax, stageheight, 50);
         ,
          sub(ymax, area.pixelheight, 50);
        );
        dec(ymax, 30);
        if(ydst GT ymax,
          inc(xdst, 110);
          set(ydst,0);
        );

      stackthumbsOpenThumb(%1,%2,NEXT);
     ,
      set(openthumboffsetx, 50);
      add(openthumboffsetx, 10);
      add(xdst, get(openthumboffsetx));

      set(openthumboffsety, 25);
      add(openthumboffsety, 10);
      add(ydst, get(openthumboffsety));

      tween(layer[%1].x, get(xdst) );
      tween(layer[%1].y, get(ydst) );
      tween(layer[%1].width , 100);
      tween(layer[%1].height, 50);
      tween(layer[%2].width , 100);
      tween(layer[%2].height, 50);
    );
  </action>

  <action name="stackthumbsOpen">
    for (set(oststackthumbsi, 0), oststackthumbsi LT scene.count, inc(oststackthumbsi),
      txtadd(thumbname,'stackthumbs_',get(oststackthumbsi));
      txtadd(thumbnameimg, get(thumbname), '_img');
      stackthumbsOpenThumb(get(thumbnameimg), get(thumbname));
      set(layer[get(thumbnameimg)].onover, stackthumbsMagnify(get(name)); );
      set(layer[get(thumbnameimg)].onout, stackthumbsLies(get(name)); hideTooltip(); );
      set(layer[get(thumbnameimg)].onhover, showTooltip('plugin'); );
      set(layer[get(thumbnameimg)].onclick, stackthumbsLies(get(name)); stackthumbsClose(0); mainloadscene(get(linkedpano)); );
    );

    set(stackthumbsIsOpen, true);
  </action>

  <action name="stackthumbsClose">
    if (stackthumbsIsOpen,
    for (set(cststackthumbsi, 0), cststackthumbsi LT scene.count, inc(cststackthumbsi),
      txtadd(thumbname,'stackthumbs_', get(cststackthumbsi));
      txtadd(thumbnameimg, get(thumbname), '_img');
      stackthumbsCloseThumb(get(thumbnameimg), get(thumbname));
    );

    set(stackthumbsIsOpen, false);
    );
  </action>
  <action name="stackthumbsCloseThumb">
    tween(layer[%1].x, get(layer[%1].xsmall));
    tween(layer[%1].y, get(layer[%1].ysmall));
    tween(layer[%1].width, 50);
    tween(layer[%1].height, 25);
    tween(layer[%2].width, 50);
    tween(layer[%2].height, 25);
    set(layer[%1].alpha, 0.8);
    set(layer[%1].onover, '');
    set(layer[%1].onout, '');
    set(layer[%1].onhover, '');hideTooltip();
    set(layer[%1].onclick, stackthumbsOpen() );
  </action>



<!-- ********** -->
<!-- Classic Control Bar -->
<!-- id : controlBar_classic -->
<!-- ********** -->

  <krpano controlBar_classicbarbuilt="false" controlBar_classicbackgroundwidthwhenclosed="0" controlBar_classicbackgroundwidthwhenopened="0" controlBar_classicIsOpened="false" />
  <events name="controlBar_classicevents" 
    onxmlcomplete="controlBar_classicbuildMenuBar();" 

    openvideointerface="controlBar_classicOpenVideoplayer();" 
    closevideointerface="controlBar_classicCloseVideoplayer();" 

    keep="true" />



  <action name="controlBar_classicbuildMenuBar">
    ifnot (controlBar_classicbarbuilt, controlBar_classicbuildMenu(); set(controlBar_classicbarbuilt, true););
  </action>

  <action name="controlBar_classicbuildMenu">
    
    set(controlBar_classicbutton_pos, 20);

    set(layer[controlBar_classicbtn_hidecontrols].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_showcontrols].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);
    add(controlBar_classicbackgroundwidthwhenclosed, get(controlBar_classicbutton_pos), 20);



    if (device.fullscreensupport,
      set(layer[controlBar_classicbtn_openfs ].x, get(controlBar_classicbutton_pos));
      set(layer[controlBar_classicbtn_closefs].x, get(controlBar_classicbutton_pos));
      inc(controlBar_classicbutton_pos, 36);
    );




    set(layer[controlBar_classicbtn_autotour_on ].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_autotour_off].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);

    set(layer[controlBar_classicbtn_sound_on ].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_sound_off].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);


    set(layer[controlBar_classicbtn_show_thumbnails].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_hide_thumbnails].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);



    set(layer[controlBar_classicbtn_show_hotspots].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_hide_hotspots].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);


    if(plugin[gyroscope],
      set(controlBar_classicDisplayGyroscopeButton, false);
      if (device.tablet, set(controlBar_classicDisplayGyroscopeButton, true););
      if (device.mobile, set(controlBar_classicDisplayGyroscopeButton, true););
      if(controlBar_classicDisplayGyroscopeButton,
        set(layer[controlBar_classicbtn_gyroscope_on ].x, get(controlBar_classicbutton_pos));
        set(layer[controlBar_classicbtn_gyroscope_off].x, get(controlBar_classicbutton_pos));
        set(layer[controlBar_classicbtn_gyroscope_not].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
      );
    );


    if (device.desktop,
        set(layer[controlBar_classicbtn_out].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
        set(layer[controlBar_classicbtn_in].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
    );

    set(layer[controlBar_classicbtn_play_video].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_pause_video].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);

    inc(controlBar_classicbutton_pos, 20);

    set(controlBar_classicbackgroundwidthwhenopened, get(controlBar_classicbutton_pos));

    sub(controlBar_classicbackgroundwidthwhenopenedwithoutvideo, controlBar_classicbackgroundwidthwhenopened, 36);


    
    add(controlBar_classicVerifyVisibility, 20, 20);
    if(controlBar_classicbackgroundwidthwhenopened == controlBar_classicVerifyVisibility,
      set(controlBar_classicbackgroundwidthwhenopened, 0);

      set(controlBar_classicbackgroundwidthwhenopenedwithoutvideo, 0);

    );

	
	
  </action>

	<events name="controlBar_classicStartTourEvents" onTourStart="controlBar_classicCallOnStartTour();" keep="true" />

	<action name="controlBar_classicCallOnStartTour">
		
		set(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbutton_pos));
		set(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbutton_pos));
		controlBar_classicshowMenuControls();
	</action>

	<action name="controlBar_classicOpenVideoplayer">
		set(controlBar_classic_use_videoplayer_interface, true);
		
		controlBar_classicupdateHideShowVideoplayerButtons();
	</action>
	<action name="controlBar_classicCloseVideoplayer">
		set(controlBar_classic_use_videoplayer_interface, false);
		
		controlBar_classicupdateHideShowVideoplayerButtons();
	</action>


  <style name="controlBar_classic_btn_style"
         keep="true"
         alpha="0.8"
         edge="right" align="right"
         width="36" height="36"
         zorder="4"
         onover="controlBar_classicctrlbaronoveraction();"
         onout="controlBar_classicctrlbaronoutaction();"
         onhover="showTooltip('plugin', controlBar_classicmenuTooltipStyle, bottom);"
         />
  <action name="controlBar_classicctrlbaronoveraction">
    tween(alpha,1,0.1,easeoutquad);
    tween(y,-2,0.1,easeoutquad);
  </action>  
  <action name="controlBar_classicctrlbaronoutaction">
    tween(alpha,0.8);
    tween(y,0,0.1,easeoutquad);
    hideTooltip();
  </action>

  <layer name="controlBar_classicmenu_controlbar_bg_img"
         keep="true"
         align="bottom"
         x="0" y="10"
         url="%FIRSTXML%/graphics/classiccontrolbar/footer.png"
         zorder="2"
         width="40"
         height="40"
         scale9grid="10|10|80|80"
         visible="false"
         />
  <layer name="controlBar_classicmenu_controlbar_bg"
         keep="true"
         align="bottom"
         x="0" y="10"
         type="container"
         zorder="3"
         width="40"
         height="40"
         visible="false"
         alpha="1.0"
         >

    <layer name="controlBar_classicbtn_hide_hotspots"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_hide_show_hotspots.png"
            style="controlBar_classic_btn_style"
            onclick="hideHotspots();
"
            tooltip="controlBar_classichideSpotsTip"
            visible="false"
            />
    <layer name="controlBar_classicbtn_show_hotspots"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_hide_show_hotspots.png"
            style="controlBar_classic_btn_style"
            onclick="showHotspots();
"
            tooltip="controlBar_classicshowSpotsTip"
            visible="false"
            />


    <layer name="controlBar_classicbtn_gyroscope_off"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_gyroscope.png"
            style="controlBar_classic_btn_style"
            onclick="disableGyroscope();
"
            devices="html5"
            tooltip="controlBar_classicgyroOffTip"
            visible="false"
            />
    <layer name="controlBar_classicbtn_gyroscope_on"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_gyroscope.png"
            style="controlBar_classic_btn_style"
            onclick="enableGyroscope();
"
            devices="html5"
            tooltip="controlBar_classicgyroOnTip"
            visible="false"
            />
    <layer name="controlBar_classicbtn_gyroscope_not"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_gyroscope_off.png"
            style="controlBar_classic_btn_style"
            enabled="true"
            capture="false"
            devices="html5"
            tooltip="controlBar_classicgyroNotTip"
            visible="false"
            />


    <layer name="controlBar_classicbtn_in"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_in.png"
            ondown="viewControlZoomIn(false);"
            onup="viewControlZoomStop();
"
            style="controlBar_classic_btn_style"
            tooltip="controlBar_classiczoomInTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_classicbtn_out"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_out.png"
            ondown="viewControlZoomOut(false);
"
            onup="viewControlZoomStop();
"
            style="controlBar_classic_btn_style"
            tooltip="controlBar_classiczoomOutTip"
            devices="desktop"
            visible="false"
            />


    <layer name="controlBar_classicbtn_sound_on"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_start_sound.png"
            onclick="playTourSounds();
"
            style="controlBar_classic_btn_style"
            visible="false"
            tooltip="controlBar_classicsoundsOnTip"
            />
    <layer name="controlBar_classicbtn_sound_off"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_stop_sound.png"
            onclick="stopTourSounds();
"
            style="controlBar_classic_btn_style"
            visible="false"
            tooltip="controlBar_classicsoundsOffTip"
            />


  <layer name="controlBar_classicbtn_hide_thumbnails"
         url="%FIRSTXML%/graphics/classiccontrolbar/btn_hide_thumbnails.png"
         style="controlBar_classic_btn_style"
         onclick="hideTourThumbnails();
"
         tooltip="controlBar_classichideThumbnailsTip"
         visible="false"
         />
  <layer name="controlBar_classicbtn_show_thumbnails"
         url="%FIRSTXML%/graphics/classiccontrolbar/btn_show_thumbnails.png"
         style="controlBar_classic_btn_style"
         onclick="showTourThumbnails();
"
         tooltip="controlBar_classicshowThumbnailsTip"
         visible="false"
         />



    <layer name="controlBar_classicbtn_openfs"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();
"
            style="controlBar_classic_btn_style"
            devices="fullscreensupport"
            visible="false"
            tooltip="controlBar_classicopenFsTip"
            />
    <layer name="controlBar_classicbtn_closefs"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();
"
            style="controlBar_classic_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_classiccloseFsTip"
            />


    <layer name="controlBar_classicbtn_autotour_on"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_start_automatic_tour.png"
            onclick="startautotour();
"
            style="controlBar_classic_btn_style"
            visible="false"
            tooltip="controlBar_classicautotourOnTip"
            />
    <layer name="controlBar_classicbtn_autotour_off"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_stop_automatic_tour.png"
            onclick="stopautotour();
"
            style="controlBar_classic_btn_style"
            visible="false"
            tooltip="controlBar_classicautotourOffTip"
            />

    <layer name="controlBar_classicbtn_play_video"
           url="%FIRSTXML%/graphics/classiccontrolbar/btn_start_videoplayer.png"
           onclick="videointerface_togglepause();"
           style="controlBar_classic_btn_style"
           visible="false"
           tooltip="controlBar_classicplayVideoTip"
           />
    <layer name="controlBar_classicbtn_pause_video"
           url="%FIRSTXML%/graphics/classiccontrolbar/btn_pause_videoplayer.png"
           onclick="videointerface_togglepause();"
           style="controlBar_classic_btn_style"
           visible="false"
           tooltip="controlBar_classicpauseVideoTip"
           />




    <layer name="controlBar_classicbtn_hidecontrols"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_hide_controls.png"
            style="controlBar_classic_btn_style"
            onclick="controlBar_classichideMenuControls();hideTourControls();
"
            visible="false"
            tooltip="controlBar_classichideControlsTip"
            />
    <layer name="controlBar_classicbtn_showcontrols"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_show_controls.png"
            style="controlBar_classic_btn_style"
            onclick="controlBar_classicshowMenuControls();showTourControls();
"
            tooltip="controlBar_classicdisplayControlsTip"
            visible="false"
            />
  </layer>



	<events name="controlBar_classicgyroscopeavailableevent"
		ongyroscopeavailable="controlBar_classicupdateGyroscopeButtonsAvailability();"
		ongyroscopeunavailable="controlBar_classicupdateGyroscopeButtonsAvailability();"
		ongyroscopeon="controlBar_classicenableGyroscopeButtons(true);"
		ongyroscopeoff="controlBar_classicenableGyroscopeButtons(false);"
		keep="true" devices="html5" />
	<krpano controlBar_classicmenugyroscopeavailable="false" controlBar_classicmenugyroscopeenabled="false" />
	<action name="controlBar_classicupdateGyroscopeButtonsAvailability">
		if (tour_gyroscopedevices,
			set(controlBar_classicmenugyroscopeavailable, true);
			controlBar_classicupdateGyroscopeButtons();
		,
			set(controlBar_classicmenugyroscopeavailable, false);
			controlBar_classicupdateGyroscopeButtons();
		);
	</action>
	<action name="controlBar_classicenableGyroscopeButtons">
		if (tour_gyroscopedevices,
			set(controlBar_classicmenugyroscopeenabled, %1);
			controlBar_classicupdateGyroscopeButtons();
		);
	</action>
	<action name="controlBar_classicHideGyroscopeButtons">
		set(layer[controlBar_classicbtn_gyroscope_off].visible, false);
		set(layer[controlBar_classicbtn_gyroscope_on].visible, false);
		if('%1' == 'true' AND plugin[gyroscope],
			set(layer[controlBar_classicbtn_gyroscope_not].visible, true);
		,
			set(layer[controlBar_classicbtn_gyroscope_not].visible, false);
		);
	</action>
	<action name="controlBar_classicShowGyroscopeButtons">
		if (controlBar_classicmenugyroscopeavailable,
			if (controlBar_classicmenugyroscopeenabled,
				set(layer[controlBar_classicbtn_gyroscope_off].visible, true);
				set(layer[controlBar_classicbtn_gyroscope_on].visible, false);
			,
				set(layer[controlBar_classicbtn_gyroscope_off].visible, false);
				set(layer[controlBar_classicbtn_gyroscope_on].visible, true);
			);
			set(layer[controlBar_classicbtn_gyroscope_not].visible, false);
		,
			controlBar_classicHideGyroscopeButtons(true);
		);
	</action>
	<action name="controlBar_classicupdateGyroscopeButtons">
	if (tour_gyroscopedevices,
		if (controlBar_classicIsOpened,
			controlBar_classicShowGyroscopeButtons();
		,
			controlBar_classicHideGyroscopeButtons();
		);
	,
		if (controlBar_classicIsOpened,
			controlBar_classicHideGyroscopeButtons(true);
		,
			controlBar_classicHideGyroscopeButtons();
		);
	);
	</action>


	<events name="controlBar_classichideshowthumbnailsevent" 
		hidetourthumbnails="controlBar_classicupdateHideShowThumbnailsButtons();" 
		showtourthumbnails="controlBar_classicupdateHideShowThumbnailsButtons();" 
		keep="true" />
	<action name="controlBar_classicHideHideShowThumbnailsButtons">
		set(layer[controlBar_classicbtn_show_thumbnails].visible, false);
		set(layer[controlBar_classicbtn_hide_thumbnails].visible, false);
	</action>
	<action name="controlBar_classicShowHideShowThumbnailsButtons">
		if (tour_displaythumbnails,
			set(layer[controlBar_classicbtn_hide_thumbnails].visible, true);
			set(layer[controlBar_classicbtn_show_thumbnails].visible, false);
		,
			set(layer[controlBar_classicbtn_show_thumbnails].visible, true);
			set(layer[controlBar_classicbtn_hide_thumbnails].visible, false);
		);
	</action>
	<action name="controlBar_classicupdateHideShowThumbnailsButtons">
		if (controlBar_classicIsOpened,
			controlBar_classicShowHideShowThumbnailsButtons();
		,
			controlBar_classicHideHideShowThumbnailsButtons();
		);
	</action>


  <action name="controlBar_classichideMenuControls">
    set(controlBar_classicIsOpened, false);
    set(layer[controlBar_classicbtn_hidecontrols].visible, false);
    set(layer[controlBar_classicbtn_showcontrols].visible, true);
    controlBar_classicupdateFullscreenButtons();

    controlBar_classicupdateSoundButtons();


    controlBar_classicupdateAutotourButtons();
    controlBar_classicupdateHideShowVideoplayerButtons();

    controlBar_classicupdateHideShowThumbnailsButtons();
    set(layer[controlBar_classicbtn_in].visible , false);
    set(layer[controlBar_classicbtn_out].visible, false);


    controlBar_classicupdateHideShowHotspotsButtons();

    controlBar_classicupdateGyroscopeButtons();



    if(controlBar_classicbackgroundwidthwhenclosed == 0,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, false);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, false);
    ,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, true);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, true);
    );
    tween(layer[controlBar_classicmenu_controlbar_bg_img].width,get(controlBar_classicbackgroundwidthwhenclosed),0.5,easeOutQuad);
    tween(layer[controlBar_classicmenu_controlbar_bg].width,get(controlBar_classicbackgroundwidthwhenclosed),0.5,easeOutQuad);
    tween(layer[controlBar_classicmenu_controlbar_bg_img].alpha,1.0,0.5,easeOutQuad);
  </action>
  <action name="controlBar_classicshowMenuControls">
    set(controlBar_classicIsOpened, true);
    set(layer[controlBar_classicbtn_hidecontrols].visible, true);
    set(layer[controlBar_classicbtn_showcontrols].visible, false);
    if(controlBar_classicbackgroundwidthwhenopened == 0,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, false);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, false);
    ,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, true);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, true);
    );
    tween(layer[controlBar_classicmenu_controlbar_bg_img].alpha,1.0,0.5,easeOutQuad);
    controlBar_classicshowMenuButtons();

    if(scene[get(xml.scene)].video,

      tween(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);
      tween(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);

    ,
      tween(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo),0.5,easeOutQuad);
      tween(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo),0.5,easeOutQuad);
    );

  </action>
  <action name="controlBar_classicshowMenuButtons">
    if (device.desktop,
    set(layer[controlBar_classicbtn_in].visible , true);
    set(layer[controlBar_classicbtn_out].visible, true);
    );


    controlBar_classicupdateHideShowHotspotsButtons();

    controlBar_classicupdateGyroscopeButtons();



    controlBar_classicupdateFullscreenButtons();

    controlBar_classicupdateSoundButtons();


    controlBar_classicupdateAutotourButtons();
    controlBar_classicupdateHideShowVideoplayerButtons();

      controlBar_classicupdateHideShowThumbnailsButtons();
  </action>



	<events name="controlBar_classicmenufullscreenchangeevent"
		onenterfullscreen="controlBar_classicupdateFullscreenButtons();"
		onexitfullscreen="controlBar_classicupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_classicHideFullscreenButtons">
		set(layer[controlBar_classicbtn_openfs].visible , false);
		set(layer[controlBar_classicbtn_closefs].visible, false);
	</action>
	<action name="controlBar_classicShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_classicbtn_openfs].visible , false);
				set(layer[controlBar_classicbtn_closefs].visible, true);
			,
				set(layer[controlBar_classicbtn_openfs].visible ,true);
				set(layer[controlBar_classicbtn_closefs].visible,false);
			);
		,
			controlBar_classicHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_classicupdateFullscreenButtons">
		if (controlBar_classicIsOpened,
			controlBar_classicShowFullscreenButtons();
		,
			controlBar_classicHideFullscreenButtons();
		);
	</action>


    <events name="controlBar_classichideshowvideoplayerevent" onplayvideointerface="controlBar_classicupdateHideShowVideoplayerButtons();" onpausevideointerface="controlBar_classicupdateHideShowVideoplayerButtons();" keep="true"/>
    <action name="controlBar_classicHideHideShowVideoplayerButtons">
      if(controlBar_classicbackgroundwidthwhenopened GT 0,
        add(controlBar_classicVerifyVisibility, 20, 20);
        if(controlBar_classicbackgroundwidthwhenopenedwithoutvideo LE controlBar_classicVerifyVisibility,
          set(layer[controlBar_classicmenu_controlbar_bg_img].visible,false);
          set(layer[controlBar_classicmenu_controlbar_bg].visible,false);
        );
        if (controlBar_classicIsOpened,
          tween(layer[controlBar_classicmenu_controlbar_bg_img].width,get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo),0.5,easeOutQuad);
          tween(layer[controlBar_classicmenu_controlbar_bg].width,get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo),0.5,easeOutQuad);
        );
      ,
        set(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo));
        set(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo));
      );
      set(layer[controlBar_classicbtn_play_video].visible, false);
      set(layer[controlBar_classicbtn_pause_video].visible, false);
    </action>
    <action name="controlBar_classicShowHideShowVideoplayerButtons">
      if(controlBar_classic_use_videoplayer_interface,
        if (plugin[get(videointerface_video)],
        add(controlBar_classicVerifyVisibility, 20, 20);
        if(controlBar_classicbackgroundwidthwhenopenedwithoutvideo LE controlBar_classicVerifyVisibility,
          set(layer[controlBar_classicmenu_controlbar_bg_img].visible,true);
          set(layer[controlBar_classicmenu_controlbar_bg].visible,true);
        );
        if (plugin[get(videointerface_video)].ispaused,
          if(controlBar_classicbackgroundwidthwhenopened GT 0,
            tween(layer[controlBar_classicmenu_controlbar_bg_img].width,get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);
            tween(layer[controlBar_classicmenu_controlbar_bg].width,get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);
          ,
            set(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo));
            set(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo));
          );
          set(layer[controlBar_classicbtn_play_video].visible, true);
          set(layer[controlBar_classicbtn_pause_video].visible, false);
        ,
          if(controlBar_classicbackgroundwidthwhenopened GT 0,
            tween(layer[controlBar_classicmenu_controlbar_bg_img].width,get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);
            tween(layer[controlBar_classicmenu_controlbar_bg].width,get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);
          ,
            set(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo));
            set(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbackgroundwidthwhenopenedwithoutvideo));
          );
          set(layer[controlBar_classicbtn_play_video].visible, false);
          set(layer[controlBar_classicbtn_pause_video].visible, true);
        ););
      ,
        controlBar_classicHideHideShowVideoplayerButtons();
      );
    </action>
    <action name="controlBar_classicupdateHideShowVideoplayerButtons">
      if (controlBar_classicIsOpened,
        controlBar_classicShowHideShowVideoplayerButtons();
      ,
        controlBar_classicHideHideShowVideoplayerButtons();
      );
    </action>
    
	<events name="controlBar_classicAutotourEvents"
		onstartautotour="controlBar_classicupdateAutotourButtons();"
		onstopautotour="controlBar_classicupdateAutotourButtons();"
		keep="true"/>
	<action name="controlBar_classicHideAutotourButtons">
		set(layer[controlBar_classicbtn_autotour_off].visible, false);
		set(layer[controlBar_classicbtn_autotour_on].visible , false);
	</action>
	<action name="controlBar_classicShowAutotourButtons">
		if (tour_autotourenabled == false,
			set(layer[controlBar_classicbtn_autotour_off].visible, false);
			set(layer[controlBar_classicbtn_autotour_on].visible , true);
		,
			set(layer[controlBar_classicbtn_autotour_off].visible, true);
			set(layer[controlBar_classicbtn_autotour_on].visible , false);
		);
	</action>
	<action name="controlBar_classicupdateAutotourButtons">
		if (controlBar_classicIsOpened,
			controlBar_classicShowAutotourButtons();
		,
			controlBar_classicHideAutotourButtons();
		);
	</action>

	<events name="controlBar_classicplaystopsoundsevent" 
		playtoursoundsevent="controlBar_classicupdateSoundButtons();" 
		stoptoursoundsevent="controlBar_classicupdateSoundButtons();" 
		keep="true" />
	<action name="controlBar_classicHideSoundButtons">
		set(layer[controlBar_classicbtn_sound_off].visible, false);
		set(layer[controlBar_classicbtn_sound_on].visible , false);
	</action>
	<action name="controlBar_classicShowSoundButtons">
		if (tour_soundson == false,
			set(layer[controlBar_classicbtn_sound_off].visible, false);
			set(layer[controlBar_classicbtn_sound_on].visible , true);
		,
			set(layer[controlBar_classicbtn_sound_off].visible, true);
			set(layer[controlBar_classicbtn_sound_on].visible , false);
		);
	</action>
	<action name="controlBar_classicupdateSoundButtons">
		if (controlBar_classicIsOpened,
			controlBar_classicShowSoundButtons();
		,
			controlBar_classicHideSoundButtons();
		);
	</action>


	<events name="controlBar_classichotspotsdisplayevents"
		hotspots_visibility_changed="controlBar_classicupdateHideShowHotspotsButtons"
		keep="true"/>
	<action name="controlBar_classicHideHideShowHotspotsButtons">
		set(layer[controlBar_classicbtn_show_hotspots].visible, false);
		set(layer[controlBar_classicbtn_hide_hotspots].visible, false);
	</action>
	<action name="controlBar_classicShowHideShowHotspotsButtons">
		if (tour_displayspots,
			set(layer[controlBar_classicbtn_hide_hotspots].visible, true);
			set(layer[controlBar_classicbtn_show_hotspots].visible, false);
		,
			set(layer[controlBar_classicbtn_show_hotspots].visible, true);
			set(layer[controlBar_classicbtn_hide_hotspots].visible, false);
		);
	</action>
	<action name="controlBar_classicupdateHideShowHotspotsButtons">
		if (controlBar_classicIsOpened,
			controlBar_classicShowHideShowHotspotsButtons();
		,
			controlBar_classicHideHideShowHotspotsButtons();
		);
	</action>


<layer name="controlBar_classicmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="false"
	bgborder="0"
	txtshadow="1.0 1.0 4.0 0x000000 1"
	css="color:#e6e6e6;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	visible="false"
	html=""
	padding="2"
	xoffset="0"
	yoffset="0"
	edge="bottom"
	/>



<!-- ********** -->
<!-- 台朝盛典 -->
<!-- id : socialButton -->
<!-- ********** -->

<ptplugin name="socialButton" engine="kolorSocial">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="50" type="int" />

		<option name="source" value="facebook" type="string" />
		<option name="data_href" value="https://www.facebook.com/set.superred/?tn-str=k*F" type="string" />

		<option name="data_action" value="like" type="string" />
		<option name="data_appid" value="" type="string" />
		<option name="data_ref" value="" type="string" />
		<option name="data_share" value="false" type="bool" />
		<option name="data_layout" value="standard" type="string" />
		<option name="data_showfaces" value="false" type="bool" />
		<option name="data_width" value="450" type="int" />
		<option name="data_colorscheme" value="dark" type="string" />
		<option name="zorder" value="5" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorSocialJsReady_socialButton">
	set(ptplugin[socialButton].jsready, true);
</action>

<action name="showKolorSocial_socialButton">
	ifnot(ptplugin[socialButton].isOpen,
		stopdelayedcall(delay_socialButton);
		set(ptplugin[socialButton].isOpen, true);
		js(openKolorSocial(socialButton));
	,
		if(ptplugin[socialButton].jsready,
			stopdelayedcall(delay_socialButton);
			js(invokePluginFunction(socialButton, showKolorSocial));
		,
			delayedcall(delay_socialButton, 0.1, showKolorSocial_socialButton(););
		);
	);
</action>

<action name="hideKolorSocial_socialButton">
	if(ptplugin[socialButton].jsready,
		stopdelayedcall(delay_socialButton);
		js(invokePluginFunction(socialButton, hideKolorSocial));
	,
		delayedcall(delay_socialButton, 0.1, hideKolorSocial_socialButton(););
	);
</action>


<events name="kolorSocialEvents_socialButton"
	keep="true"


	onTourStart="showKolorSocial_socialButton();"

/>

<!-- ********** -->
<!-- LINE Share -->
<!-- id : socialButton2 -->
<!-- ********** -->

<ptplugin name="socialButton2" engine="kolorSocial">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="80" type="int" />

		<option name="source" value="lineit" type="string" />
		<option name="data_href" value="https://acts.setn.com/event/tpop2019/vr.html" type="string" />

		<option name="data_action" value="share" type="string" />
		<option name="data_layout" value="share-a" type="string" />
		<option name="zorder" value="6" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorSocialJsReady_socialButton2">
	set(ptplugin[socialButton2].jsready, true);
</action>

<action name="showKolorSocial_socialButton2">
	ifnot(ptplugin[socialButton2].isOpen,
		stopdelayedcall(delay_socialButton2);
		set(ptplugin[socialButton2].isOpen, true);
		js(openKolorSocial(socialButton2));
	,
		if(ptplugin[socialButton2].jsready,
			stopdelayedcall(delay_socialButton2);
			js(invokePluginFunction(socialButton2, showKolorSocial));
		,
			delayedcall(delay_socialButton2, 0.1, showKolorSocial_socialButton2(););
		);
	);
</action>

<action name="hideKolorSocial_socialButton2">
	if(ptplugin[socialButton2].jsready,
		stopdelayedcall(delay_socialButton2);
		js(invokePluginFunction(socialButton2, hideKolorSocial));
	,
		delayedcall(delay_socialButton2, 0.1, hideKolorSocial_socialButton2(););
	);
</action>


<events name="kolorSocialEvents_socialButton2"
	keep="true"


	onTourStart="showKolorSocial_socialButton2();"

/>

<!-- ********** -->
<!-- Facebook Share -->
<!-- id : socialButton1 -->
<!-- ********** -->

<ptplugin name="socialButton1" engine="kolorSocial">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="20" type="int" />

		<option name="source" value="facebook" type="string" />
		<option name="data_href" value="https://acts.setn.com/event/tpop2019/vr.html" type="string" />

		<option name="data_action" value="share" type="string" />
		<option name="data_appid" value="" type="string" />
		<option name="data_ref" value="" type="string" />
		<option name="data_share" value="false" type="bool" />
		<option name="data_layout" value="button" type="string" />
		<option name="zorder" value="7" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorSocialJsReady_socialButton1">
	set(ptplugin[socialButton1].jsready, true);
</action>

<action name="showKolorSocial_socialButton1">
	ifnot(ptplugin[socialButton1].isOpen,
		stopdelayedcall(delay_socialButton1);
		set(ptplugin[socialButton1].isOpen, true);
		js(openKolorSocial(socialButton1));
	,
		if(ptplugin[socialButton1].jsready,
			stopdelayedcall(delay_socialButton1);
			js(invokePluginFunction(socialButton1, showKolorSocial));
		,
			delayedcall(delay_socialButton1, 0.1, showKolorSocial_socialButton1(););
		);
	);
</action>

<action name="hideKolorSocial_socialButton1">
	if(ptplugin[socialButton1].jsready,
		stopdelayedcall(delay_socialButton1);
		js(invokePluginFunction(socialButton1, hideKolorSocial));
	,
		delayedcall(delay_socialButton1, 0.1, hideKolorSocial_socialButton1(););
	);
</action>


<events name="kolorSocialEvents_socialButton1"
	keep="true"


	onTourStart="showKolorSocial_socialButton1();"

/>

<!-- ********** -->
<!-- 台潮盛典官網 -->
<!-- id : button1 -->
<!-- ********** -->

  <layer name="button1"
         keep="true"
         url="%FIRSTXML%/graphics/button1/_201921488285263042720856-200273522235258-01-1276041.jpg"
         align="topleft"
         x="80"
         y="10"
         zorder="8"
         visible="false"
         onclick="button1OnClick"
         tooltip="button1tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();"
         height="50"
         width="50"
         />



  <action name="button1OnClick">getmessage(urltoopen,button1onclick102200openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="button1events"
    onTourStart="showbutton1();"
    hidetourcontrols="hidebutton1();"
    showtourcontrols="showbutton1();"
    keep="true" />
  <action name="hidebutton1">set(layer[button1].visible, false);</action>
  <action name="showbutton1">if(tour_displaycontrols,set(layer[button1].visible, true);,hidebutton1(););</action>


<!-- ********** -->
<!-- 三立新聞網 -->
<!-- id : button3 -->
<!-- ********** -->

  <layer name="button3"
         keep="true"
         url="%FIRSTXML%/graphics/button3/_31435260323286232178300.png"
         align="topleft"
         x="150"
         y="10"
         zorder="9"
         visible="false"
         onclick="button3OnClick"
         tooltip="button3tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();"
         height="50"
         width="50"
         />



  <action name="button3OnClick">getmessage(urltoopen,button3onclick102934openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="button3events"
    onTourStart="showbutton3();"
    hidetourcontrols="hidebutton3();"
    showtourcontrols="showbutton3();"
    keep="true" />
  <action name="hidebutton3">set(layer[button3].visible, false);</action>
  <action name="showbutton3">if(tour_displaycontrols,set(layer[button3].visible, true);,hidebutton3(););</action>


<!-- ********** -->
<!-- vidol -->
<!-- id : button -->
<!-- ********** -->

  <layer name="button"
         keep="true"
         url="%FIRSTXML%/graphics/button/vidol260412241140643233833425324213logo-50pix.png"
         align="topleft"
         x="10"
         y="10"
         zorder="10"
         visible="false"
         onclick="buttonOnClick"
         tooltip="buttontooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();"
         height="50"
         width="50"
         />



  <action name="buttonOnClick">getmessage(urltoopen,buttononclick102263openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonevents"
    onTourStart="showbutton();"
    hidetourcontrols="hidebutton();"
    showtourcontrols="showbutton();"
    keep="true" />
  <action name="hidebutton">set(layer[button].visible, false);</action>
  <action name="showbutton">if(tour_displaycontrols,set(layer[button].visible, true);,hidebutton(););</action>


<!-- ********** -->
<!-- Description -->
<!-- id : description -->
<!-- ********** -->

<ptplugin name="description" canStart="false" newPano="false" openatstart="false" mode="spot" startMethod="" engine="kolorArea">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="80" type="int" />
		<option name="background_color" value="ffffff" type="string" />
		<option name="background_alpha" value="1" type="float" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f1f2d5" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="padding" value="10" type="int" />
		<option name="display_title" value="false" type="bool" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="descriptiondisplay_close_text" type="string" />

		<option name="close_image" value="TESTdata/graphics/description/_29242253073859820196.jpg" type="string" />

		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="1" type="float" />

		<option name="overlay_image" value="TESTdata/graphics/description/logo.png" type="string" />

		<option name="area_width" value="150" type="int" />
		<option name="area_height" value="500" type="int" />
		<option name="area_width_unit" value="pixel" type="string" />
		<option name="area_height_unit" value="pixel" type="string" />
		<option name="animation" value="true" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="refresh_content" value="true" type="bool" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_description')" type="string" />
		<option name="close_on_click" value="true" type="bool" />
		<option name="close_onclick_callback" value="invokeKrFunction('closeKolorAreaCallbackClick_description')" type="string" />
		<option name="zorder" value="11" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorAreaJsReady_description">
	set(ptplugin[description].jsready, true);

</action>


<action name="openKolorArea_description">
	ifnot(ptplugin[description].isOpen,
		if(ptplugin[description].doNotDeleteMe,
		set(ptplugin[description].currentCall, false);
		set(ptplugin[description].doNotDeleteMe, false);
		set(ptplugin[description].isOpen, true);
		pauseautorotation(forceplugin);

		js(showKolorArea(description, get(ptplugin[description].descID)));
		,
			set(ptplugin[description].currentCall, true);
			set(ptplugin[description].doNotDeleteMe, true);
			events.dispatch(onremovedisplayedobject);
			delayedcall(0.3,openKolorArea_description(););
		);
	);
</action>

<action name="closeKolorArea_description">
	if(ptplugin[description].isOpen,
		if(ptplugin[description].doNotDeleteMe,
			set(ptplugin[description].doNotDeleteMe, false);
		,
		js(invokePluginFunction(description, closeKolorArea));
		);
	);
</action>

<action name="toggleKolorArea_description">
	if(ptplugin[description].isOpen,
		closeKolorArea_description();
	,
		openKolorArea_description();
	);
</action>

<action name="closeKolorAreaCallback_description">
	set(ptplugin[description].doNotDeleteMe, false);
	if(ptplugin[description].isOpen,resumeautorotation(forceplugin);

		
	);
	set(ptplugin[description].isOpen, false);
</action>

<action name="closeKolorAreaCallbackClick_description">


	if(ptplugin[description].isOpen,
		closeDescription_description(false);
	);
</action>


<action name="showKolorArea_description">
	ifnot(ptplugin[description].startMethod == "",
		delayedcall(0,get(ptplugin[description].startMethod));
	,
		if(ptplugin[description].doNotDeleteMe,
			set(ptplugin[description].currentCall, false);
			set(ptplugin[description].doNotDeleteMe, false);
		set(ptplugin[description].isOpen, true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(description, showKolorArea, %1));
		,
			set(ptplugin[description].currentCall, true);
			set(ptplugin[description].doNotDeleteMe, true);
			events.dispatch(onremovedisplayedobject);
			delayedcall(0.3,showKolorArea_description(%1););
		);
	);
</action>
	
<action name="hideKolorArea_description">
	if(ptplugin[description].doNotDeleteMe,
		set(ptplugin[description].doNotDeleteMe, false);
	,
	resumeautorotation(forceplugin);

	
	set(ptplugin[description].isOpen, false);
	js(invokePluginFunction(description, hideKolorArea, %1));
	);
</action>

<action name="openDescription_description">
	openKolorArea_description();
</action>

<action name="openSpotDescription_description">
	set(ptplugin[description].descID, %1);
	openKolorArea_description();
</action>

<action name="closeDescription_description">
	set(ptplugin[description].currentGroup, false);
	if(%1,
		set(restore_description, true);
	,
		set(restore_description, false);
	);
	closeKolorArea_description();
</action> 

<action name="showDescription_description">
	if(ptplugin[description].canStart,
		if(ptplugin[description].descID != "",
			openDescription_description();
		,
			hideKolorArea_description(false);
		);
		set(ptplugin[description].startMethod, "");
	);
</action>



<action name="changeLanguage_description">
	if(ptplugin[description].jsready,
		stopdelayedcall(delay_description);
		js(invokePluginFunction(description, changeLanguage, true));
	,
		delayedcall(delay_description, 0.1, changeLanguage_description(););
	);
</action>

<events name="kolorAreaEvents_description" 
	keep="true"
	onTourStart="set(ptplugin[description].canStart, true);if(ptplugin[description].openatstart,ifnot(ptplugin[description].startMethod == '',delayedcall(0,get(ptplugin[description].startMethod));););"
	onremovepano="if(ptplugin[description].isOpen,closeKolorArea_description(););"
	onremovedisplayedobject="ifnot(ptplugin[description].currentCall,if(ptplugin[description].isOpen,closeKolorArea_description();););"
	changetourlanguage="changeLanguage_description();"
/>

  <action name="displayWebVideo">
    if(layer[webvideodisplay_bg],

    ,
      <!-- add overlay -->
      addlayer(webvideodisplay_bg);
      set(layer[webvideodisplay_bg].type, container);
      set(layer[webvideodisplay_bg].zorder, 98);
      set(layer[webvideodisplay_bg].align, topleft);
      set(layer[webvideodisplay_bg].width, 100%);
      set(layer[webvideodisplay_bg].height, 100%);
      set(layer[webvideodisplay_bg].bgcolor, %16);
      set(layer[webvideodisplay_bg].bgalpha, %17);
      set(layer[webvideodisplay_bg].bgcapture, true);
      set(layer[webvideodisplay_bg].handcursor, false);
      set(layer[webvideodisplay_bg].alpha, 0.0);
      set(layer[webvideodisplay_bg].onclick, displayWebVideoObjectClose() );
      tween(layer[webvideodisplay_bg].alpha, 1.0, 0.5, default,


        addlayer(webvideodisplay_player);
        set(layer[webvideodisplay_player].parent, layer[webvideodisplay_bg]);
        set(layer[webvideodisplay_player].align, %13);
        set(layer[webvideodisplay_player].x, %14);
        set(layer[webvideodisplay_player].y, %15);
        set(layer[webvideodisplay_player].alpha, 0.0);
        set(layer[webvideodisplay_player].pauseautorotate, %18);
        set(layer[webvideodisplay_player].pausebgsound, %19);

        sub(maxstagewidth, get(stagewidth), %14);
        sub(maxstageheight, get(stageheight), %15);

        if('4:3' == '%3',
          div(aspect, 4, 3);
        ,
          if('2.39:1' == '%3',
            div(aspect, 2.39, 1);
          ,
            div(aspect, 16, 9);
          );
        );
        if(%9,
          if(%10 == 'pixel',
            set(new_videowidth, %9);
            div(new_videoheight, get(new_videowidth), get(aspect));
          ,
            mul(new_videowidth, get(maxstagewidth), %9);
            div(new_videowidth, 100);
            div(new_videoheight, get(new_videowidth), get(aspect));
          );
        ,
          ifnot(%11,
            set(max_videoheight, %2);
            set(new_videowidth, %1);
            set(new_videoheight, %2);
          );
        );
        if(%11,
          ifnot(%9,
            if(%12 == 'pixel',
              set(new_videoheight, %11);
              mul(new_videowidth, get(new_videoheight), get(aspect));
            ,
              mul(new_videoheight, get(maxstageheight), %11);
              div(new_videoheight, 100);
              mul(new_videowidth, get(new_videoheight), get(aspect));
            );
            set(max_videoheight, get(new_videoheight));
          ,
            if(%12 == 'pixel',
              set(max_videoheight, %11);
            ,
              mul(max_videoheight, get(maxstageheight), %11);
              div(max_videoheight, 100);
            );
          );
        ,
          set(max_videoheight, get(new_videoheight));
        );
        if(new_videowidth GT maxstagewidth,
          set(new_videowidth, get(maxstagewidth));
          div(new_videoheight, get(new_videowidth), get(aspect));
        );
        if(max_videoheight GT maxstageheight,
          set(max_videoheight, get(maxstageheight));
        );
        if(new_videoheight GT max_videoheight,
          set(new_videoheight, get(max_videoheight));
          mul(new_videowidth, get(new_videoheight), get(aspect));
        );
        roundval(new_videowidth);
        roundval(new_videoheight);
        set(layer[webvideodisplay_player].width, get(new_videowidth));
        set(layer[webvideodisplay_player].height, get(new_videoheight));

        set(tour_current_played_web_video, %8);

        if(device.html5,

          txtadd(iframecode, '[iframe width="',get(layer[webvideodisplay_player].width),'" height="',get(layer[webvideodisplay_player].height),'" src="','%4','%8','?','%6','" frameborder="0" allowfullscreen][/iframe]');
          set(layer[webvideodisplay_player].html, get(iframecode));
          set(layer[webvideodisplay_player].padding, 0);
          set(layer[webvideodisplay_player].type, 'text');
          set(layer[webvideodisplay_player].onloaded, displayWebVideoObjectReady() );
        ,

          txtadd(embedurl, '%5','%8','%7');
          set(layer[webvideodisplay_player].onloaded, registercontentsize(%1,%2);displayWebVideoObjectReady(); );
          set(layer[webvideodisplay_player].url, get(embedurl));
        );
      );
    );
  </action>
  <action name="displayWebVideoObjectReady">
    if(layer[webvideodisplay_player],
      set(layer[webvideodisplay_player].currentCall, true);
      events.dispatch(onremovedisplayedobject);
      tween(layer[webvideodisplay_player].alpha, 1.0, default, default,
        if(layer[webvideodisplay_player].pauseautorotate,pauseautorotation(forcehotspot);
);
        if(layer[webvideodisplay_player].pausebgsound,pauseTourSoundsActions(true,true,false,true,true););
      );
    );
  </action>
  <action name="displayWebVideoObjectClose">
    if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].currentCall,
        set(layer[webvideodisplay_player].currentCall, false);
      ,
        set(layer[webvideodisplay_bg].onclick, null);
        delete(tour_current_played_web_video);
        tween(layer[webvideodisplay_player].alpha, 0.0, 0.25, default);
        tween(layer[webvideodisplay_bg].alpha,0.0, 0.50, default,
          if(layer[webvideodisplay_player].pauseautorotate,resumeautorotation(forcehotspot);
);
          if(layer[webvideodisplay_player].pausebgsound,resumeTourSoundsActions(true,true,true,true,true););
          removelayer(webvideodisplay_bg);
          removelayer(webvideodisplay_player);
        );
      );
    );
  </action>
  <events name="displayWebVideoObjectEvents" keep="true" onremovedisplayedobject="displayWebVideoObjectClose();"/>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Hide / Show Thumbnails -->
  <action name="hideTourThumbnails">set(tour_displaythumbnails, false);events.dispatch(hidetourthumbnails);</action>
  <action name="showTourThumbnails">set(tour_displaythumbnails, true); events.dispatch(showtourthumbnails);</action>


<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url.html5="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          bgsoundtoforce = "false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            set(plugin[soundinterface].bgsoundtoforce, false);
            if(scene[get(xml.scene)].video == false OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
           ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            ,

              if(device.mobile OR device.tablet OR device.safari OR device.chrome,
                resumesound(bgsoundname);
                set(plugin[soundinterface].bgsoundpaused, false);
              );
            );
          ,
            if(((plugin[soundinterface].bgsoundpaused == true OR plugin[soundinterface].bgsoundtoforce == true) AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              set(plugin[soundinterface].bgsound, true);
              set(plugin[soundinterface].bgsoundpaused, false);
              set(plugin[soundinterface].bgsoundloopended, false);
              set(plugin[soundinterface].bgsoundtoforce, false);
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
    preloadsound("_25_3889936556_25-3.mp3");
    preloadsound("spring_in_my_step__1_.mp3");
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          ,

            if(device.mobile OR device.tablet OR device.safari OR device.chrome,
              set(tour_current_played_sound_paused, false);
              resumesound(get(tour_current_played_sound));
            );
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

</krpano>